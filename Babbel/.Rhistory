plot(event_glmn_cv)
lmin = event_glmn_cv$lambda.min # 0.01995262 # 0.01584893 # 0.01584893
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F)
event_glmn
KAUF_NACH_FLYER_PREDICTED = predict(event_glmn, s = lmin, newx = test, type = "response")
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.36, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.37, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
KAUF_NACH_FLYER_PREDICTED
KAUF_NACH_FLYER
events[-sample, ]$KAUF_NACH_FLYER
str(event_glmn)
event_glmn
summary(event_glmn)
events <- fread("/home/vinzent/Documents/r_scrips/mytoys/20140415_Scoring_Modell_daten.csv", sep = ';')
summary(events)
events$EINWOHNERKLASSE_WOHNORT <- as.factor(events$EINWOHNERKLASSE_WOHNORT)
events$KINDER_GEB_SAISON <- as.factor(events$KINDER_GEB_SAISON)
events$SUM_RABATT_GSCHEIN <- as.numeric(sub(',', '.', events$SUM_RABATT_GSCHEIN))
events$KUNDENALTER_BIN <- as.factor(round(events$KUNDENALTER, -1))
events$KINDER_BIN <- events$ANZ_KINDER > 0
events$CS_KONTAKT_FREQ <- events$ANZ_CS_KONTAKTE / events$ANZ_AUFTRAEGE
events$RETOURNIERT <- events$ANZ_RETOUREN > 0
events$KONTAKTIERT <- events$ANZ_CS_KONTAKTE > 0
events$GUTSCHEIN_FREQ <- events$ANZ_AUFTRAEGE_GSCHEIN / events$ANZ_AUFTRAEGE
events[ , RETOUREN_ANTEIL := min((ANZ_RETOUREN / ANZ_AUFTRAEGE), 1), by = ID]
events[ , SUM_Retouren_POS := SUM_LIEFERMENGE_RETOUREN/SUM_LIEFERMENGE_AUFTRAEGE]
events[ , RETOUREN_POS := ANZ_POSITIONEN_RETOUREN / ANZ_POSITIONEN_AUFTRAG]
events$RABATT_AVG <- events$SUM_RABATT_GSCHEIN / events$ANZ_AUFTRAEGE
events[ , POSITIONEN_AVG := ANZ_POSITIONEN_AUFTRAG / ANZ_AUFTRAEGE]
events$EINMAL_KUNDE <- events$ANZ_AUFTRAEGE == 1
events$NEWSLETTER <- events$ANZ_AUFTRAEGE_NL > 0
events$NEWSLETTER_30 <- events$ANZ_AUFTRAEGE_NL_0_TO_30 > 0
events$OPENING <- events$ANZ_NL_GEOEFFNET_0_TO_30 > 0
events$JAHRE_ERSTKAUF <- as.factor(ceiling(events$TAGE_ERSTKAUF/365))
events$JAHRE_LETZTKAUF <- as.factor(ceiling(events$TAGE_LETZTKAUF/365))
events$JAHRE_ERST_ZWEIT_KAUF <- as.factor(ceiling(events$TAGE_ERST_ZWEIT_KAUF/365))
events$JAHRE_LETZT_VORLETZT_KAUF <- as.factor(ceiling(events$TAGE_LETZT_VORLETZT_KAUF/365))
events$KAUF_NACH_FLYER <- as.factor(events$KAUF_NACH_FLYER)
summary(events)
perf = performance(pred,"tpr","fpr")
predict(train, event_glm)
predict(train, event_glm,s = lmin)
predict(train, event_glm, s = lmin)
predict(event_glm)
predict(event_glmn)
predict(event_glmn, newx = F)
predict(event_glmn, newx = train)
predict(event_glmn, , s = lmin, newx = train, type = "response")
glmnet_residuals <- function(data, model, lambda) {
insample_preds <- predict(model, s = lmin, newx = data, type = "response")
insample_res <- abs(insample_preds, resp)
}
glmnet_residuals(train, event_glmn, lmin)
glmnet_residuals <- function(data, model, lambda) {
insample_preds <- predict(model, s = lmin, newx = data, type = "response")
insample_res <- abs(insample_preds - resp)
}
glmnet_residuals(train, event_glmn, lmin)
str(resp)
as.integer(resp)
glmnet_residuals <- function(data, model, lambda) {
insample_preds <- predict(model, s = lmin, newx = data, type = "response")
insample_res <- abs(insample_preds - ifelse(resp == "1", 1, 0))
}
glmnet_residuals(train, event_glmn, lmin)
glmnet_residuals <- function(data, model, lambda) {
insample_preds <- predict(model, s = lmin, newx = data, type = "response")
return(abs(insample_preds - ifelse(resp == "1", 1, 0)))
}
glmnet_residuals(train, event_glmn, lmin)
train_dt <- events[sample, ]
train_dt$residuals <- glmnet_residuals(train, event_glmn, lmin)
train_dt
residuals(event_glmn)
head(train[order(residuals), ])
head(train_dt[order(residuals), ])
head(train_dt[-order(residuals), ])
head(train_dt[order(-residuals), ])
insample_preds
head(train_dt[order(-residuals), ], 10)
ggplot(train_dt, aes(residuals)) + geom_density()
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.37, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
weights <- ifelse(resp == 0, 1, 2)
event_glmn_cv <- cv.glmnet(train, resp, alpha = 0, family = "binomial", lambda = l, standardize = F, nfolds = 12, weights = weights)
plot(event_glmn_cv)
lmin = event_glmn_cv$lambda.min # 0.01995262 # 0.01584893 # 0.01584893
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F, weights = weights)
KAUF_NACH_FLYER_PREDICTED = predict(event_glmn, s = lmin, newx = test, type = "response")
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.37, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.5, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.55, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.54, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.53, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.52, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.53, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
weights <- ifelse(resp == 0, 1, 4)
event_glmn_cv <- cv.glmnet(train, resp, alpha = 0, family = "binomial", lambda = l, standardize = F, nfolds = 12, weights = weights)
plot(event_glmn_cv)
lmin = event_glmn_cv$lambda.min # 0.01995262 # 0.01584893 # 0.01584893
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F, weights = weights)
KAUF_NACH_FLYER_PREDICTED = predict(event_glmn, s = lmin, newx = test, type = "response")
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.53, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.63, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.73, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.72, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.71, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.72, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.73, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.74, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.7, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.69, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
weights <- ifelse(resp == 0, 1, 6)
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F, weights = weights)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.69, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
event_glmn_cv <- cv.glmnet(train, resp, alpha = 0, family = "binomial", lambda = l, standardize = F, nfolds = 12, weights = weights)
plot(event_glmn_cv)
lmin = event_glmn_cv$lambda.min # 0.01995262 # 0.01584893 # 0.01584893
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F, weights = weights)
KAUF_NACH_FLYER_PREDICTED = predict(event_glmn, s = lmin, newx = test, type = "response")
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.69, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.8, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.75, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.77, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.78, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
weights <- ifelse(resp == 0, 1, 5)
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F, weights = weights)
event_glmn_cv <- cv.glmnet(train, resp, alpha = 0, family = "binomial", lambda = l, standardize = F, nfolds = 12, weights = weights)
plot(event_glmn_cv)
lmin = event_glmn_cv$lambda.min # 0.01995262 # 0.01584893 # 0.01584893
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F, weights = weights)
KAUF_NACH_FLYER_PREDICTED = predict(event_glmn, s = lmin, newx = test, type = "response")
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.78, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.75, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.73, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.74, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.75, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
weights <- ifelse(resp == 0, 1, 3)
event_glmn_cv <- cv.glmnet(train, resp, alpha = 0, family = "binomial", lambda = l, standardize = F, nfolds = 12, weights = weights)
plot(event_glmn_cv)
lmin = event_glmn_cv$lambda.min # 0.01995262 # 0.01584893 # 0.01584893
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F, weights = weights)
KAUF_NACH_FLYER_PREDICTED = predict(event_glmn, s = lmin, newx = test, type = "response")
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.75, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.7, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.6, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.65, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.64, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.63, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
weights <- ifelse(resp == 0, 1, 4)
event_glmn_cv <- cv.glmnet(train, resp, alpha = 0, family = "binomial", lambda = l, standardize = F, nfolds = 12, weights = weights)
plot(event_glmn_cv)
lmin = event_glmn_cv$lambda.min # 0.01995262 # 0.01584893 # 0.01584893
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F, weights = weights)
KAUF_NACH_FLYER_PREDICTED = predict(event_glmn, s = lmin, newx = test, type = "response")
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.63, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.66, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.63, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.64, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.65, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.67, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.69, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
train_dt <- events[sample, ]
train_dt$residuals <- glmnet_residuals(train, event_glmn, lmin)
ggplot(train_dt, aes(residuals)) + geom_density()
head(train_dt[order(-residuals), ], 10)
dim(train_dt)
head(train_dt[order(-residuals), ], 10)
train_dt[order(-residuals), ]
train_dt[order(-residuals), ][1:nrow(train_dt*0.005)]
train_dt[order(-residuals), ][1:nrow(train_dt)*0.005]
train_dt[order(-residuals), ][1:nrow(train_dt)*0.005, ]
nrow(train_dt)*0.005
1:nrow(train_dt)*0.005
1:as.integer(nrow(train_dt)*0.005)
train_dt[order(-residuals), ][1:as.integer(nrow(train_dt)*0.005), ]
train_dt[order(-residuals), ][1:as.integer(nrow(train_dt)*0.005), ] <- NULL
percentile(train_dt$residuals, 0.005)
quantile(train_dt$residuals, 0.005)
quantile(train_dt$residuals, 0.995)
train_dt[residuals >= quantile(train_dt$residuals, 0.995), ]
dim(train_dt)
train_dt[residuals < quantile(train_dt$residuals, 0.995), ]
dim(train_dt)
train <- train[train_dt$residuals < quantile(train_dt$residuals, 0.995), ]
dim(train)
events
sample = sample(1:nrow(events), nrow(events)*(2/3))
train_dt <- events[sample, ]
train_dt
train_dt[residuals < quantile(residuals, 0.995), ]
train_dt
train_dt$residuals <- glmnet_residuals(train, event_glmn, lmin)
events <- fread("/home/vinzent/Documents/r_scrips/mytoys/20140415_Scoring_Modell_daten.csv", sep = ';')
summary(events)
events$EINWOHNERKLASSE_WOHNORT <- as.factor(events$EINWOHNERKLASSE_WOHNORT)
events$KINDER_GEB_SAISON <- as.factor(events$KINDER_GEB_SAISON)
events$SUM_RABATT_GSCHEIN <- as.numeric(sub(',', '.', events$SUM_RABATT_GSCHEIN))
events$KUNDENALTER_BIN <- as.factor(round(events$KUNDENALTER, -1))
events$KINDER_BIN <- events$ANZ_KINDER > 0
events$CS_KONTAKT_FREQ <- events$ANZ_CS_KONTAKTE / events$ANZ_AUFTRAEGE
events$RETOURNIERT <- events$ANZ_RETOUREN > 0
events$KONTAKTIERT <- events$ANZ_CS_KONTAKTE > 0
events$GUTSCHEIN_FREQ <- events$ANZ_AUFTRAEGE_GSCHEIN / events$ANZ_AUFTRAEGE
events[ , RETOUREN_ANTEIL := min((ANZ_RETOUREN / ANZ_AUFTRAEGE), 1), by = ID]
events[ , SUM_Retouren_POS := SUM_LIEFERMENGE_RETOUREN/SUM_LIEFERMENGE_AUFTRAEGE]
events[ , RETOUREN_POS := ANZ_POSITIONEN_RETOUREN / ANZ_POSITIONEN_AUFTRAG]
events$RABATT_AVG <- events$SUM_RABATT_GSCHEIN / events$ANZ_AUFTRAEGE
events[ , POSITIONEN_AVG := ANZ_POSITIONEN_AUFTRAG / ANZ_AUFTRAEGE]
events$EINMAL_KUNDE <- events$ANZ_AUFTRAEGE == 1
events$NEWSLETTER <- events$ANZ_AUFTRAEGE_NL > 0
events$NEWSLETTER_30 <- events$ANZ_AUFTRAEGE_NL_0_TO_30 > 0
events$OPENING <- events$ANZ_NL_GEOEFFNET_0_TO_30 > 0
events$JAHRE_ERSTKAUF <- as.factor(ceiling(events$TAGE_ERSTKAUF/365))
events$JAHRE_LETZTKAUF <- as.factor(ceiling(events$TAGE_LETZTKAUF/365))
events$JAHRE_ERST_ZWEIT_KAUF <- as.factor(ceiling(events$TAGE_ERST_ZWEIT_KAUF/365))
events$JAHRE_LETZT_VORLETZT_KAUF <- as.factor(ceiling(events$TAGE_LETZT_VORLETZT_KAUF/365))
events$KAUF_NACH_FLYER <- as.factor(events$KAUF_NACH_FLYER)
events[, (log_columns) := lapply(.SD, log), .SDcols = log_columns]
events[, (sqrt_columns) := lapply(.SD, sqrt), .SDcols = sqrt_columns]
events[, (scale_columns) := lapply(.SD, scale), .SDcols = scale_columns]
train_dt <- events[sample, ]
input = model.matrix( ~.-1, data = events[, -c("ID", "KAUF_NACH_FLYER")])
train = input[sample, ]
resp = events[sample, ]$KAUF_NACH_FLYER
weights <- ifelse(resp == 0, 1, 4)
test = input[-sample, ]
event_glmn_cv <- cv.glmnet(train, resp, alpha = 0, family = "binomial", lambda = l, standardize = F, nfolds = 12, weights = weights)
plot(event_glmn_cv)
lmin = event_glmn_cv$lambda.min # 0.01995262 # 0.01584893 # 0.01584893
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F, weights = weights)
KAUF_NACH_FLYER_PREDICTED = predict(event_glmn, s = lmin, newx = test, type = "response")
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.69, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.71, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.72, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.73, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.74, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.75, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.79, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
library(data.table)
#library(car)
library(glmnet)
library(ROCR)
library(caret)
library(ggplot2)
events <- fread("/home/vinzent/Documents/r_scrips/mytoys/20140415_Scoring_Modell_daten.csv", sep = ';')
summary(events)
events$EINWOHNERKLASSE_WOHNORT <- as.factor(events$EINWOHNERKLASSE_WOHNORT)
events$KINDER_GEB_SAISON <- as.factor(events$KINDER_GEB_SAISON)
events$SUM_RABATT_GSCHEIN <- as.numeric(sub(',', '.', events$SUM_RABATT_GSCHEIN))
events$KUNDENALTER_BIN <- as.factor(round(events$KUNDENALTER, -1))
events$KINDER_BIN <- events$ANZ_KINDER > 0
events$CS_KONTAKT_FREQ <- events$ANZ_CS_KONTAKTE / events$ANZ_AUFTRAEGE
events$RETOURNIERT <- events$ANZ_RETOUREN > 0
events$KONTAKTIERT <- events$ANZ_CS_KONTAKTE > 0
events$GUTSCHEIN_FREQ <- events$ANZ_AUFTRAEGE_GSCHEIN / events$ANZ_AUFTRAEGE
events[ , RETOUREN_ANTEIL := min((ANZ_RETOUREN / ANZ_AUFTRAEGE), 1), by = ID]
events[ , SUM_Retouren_POS := SUM_LIEFERMENGE_RETOUREN/SUM_LIEFERMENGE_AUFTRAEGE]
events[ , RETOUREN_POS := ANZ_POSITIONEN_RETOUREN / ANZ_POSITIONEN_AUFTRAG]
events$RABATT_AVG <- events$SUM_RABATT_GSCHEIN / events$ANZ_AUFTRAEGE
events[ , POSITIONEN_AVG := ANZ_POSITIONEN_AUFTRAG / ANZ_AUFTRAEGE]
events$EINMAL_KUNDE <- events$ANZ_AUFTRAEGE == 1
events$NEWSLETTER <- events$ANZ_AUFTRAEGE_NL > 0
events$NEWSLETTER_30 <- events$ANZ_AUFTRAEGE_NL_0_TO_30 > 0
events$OPENING <- events$ANZ_NL_GEOEFFNET_0_TO_30 > 0
events$JAHRE_ERSTKAUF <- as.factor(ceiling(events$TAGE_ERSTKAUF/365))
events$JAHRE_LETZTKAUF <- as.factor(ceiling(events$TAGE_LETZTKAUF/365))
events$JAHRE_ERST_ZWEIT_KAUF <- as.factor(ceiling(events$TAGE_ERST_ZWEIT_KAUF/365))
events$JAHRE_LETZT_VORLETZT_KAUF <- as.factor(ceiling(events$TAGE_LETZT_VORLETZT_KAUF/365))
events$KAUF_NACH_FLYER <- as.factor(events$KAUF_NACH_FLYER)
scale_columns = names(events[, -c(1,2,6,33,34,35,37,38,45:52)])
log_columns = c("SUM_LIEFERMENGE_AUFTRAEGE", "ANZ_POSITIONEN_AUFTRAG")
sqrt_columns = c("ANZ_AUFTRAEGE_360_TO_720", "ANZ_RETOUREN_0_TO_30", "TAGE_LETZT_VORLETZT_KAUF")
events[, (log_columns) := lapply(.SD, log), .SDcols = log_columns]
events[, (sqrt_columns) := lapply(.SD, sqrt), .SDcols = sqrt_columns]
events[, (scale_columns) := lapply(.SD, scale), .SDcols = scale_columns]
sample = sample(1:nrow(events), nrow(events)*(2/3))
# train/test split
set.seed(111)
sample = sample(1:nrow(events), nrow(events)*(2/3))
train_dt <- events[sample, ]
input = model.matrix( ~.-1, data = events[, -c("ID", "KAUF_NACH_FLYER")])
train = input[sample, ]
resp = events[sample, ]$KAUF_NACH_FLYER
weights <- ifelse(resp == 0, 1, 4)
test = input[-sample, ]
l = 10^seq(6, -5, by = -.1)
event_glmn_cv <- cv.glmnet(train, resp, alpha = 0, family = "binomial", lambda = l, standardize = F, nfolds = 12, weights = weights)
plot(event_glmn_cv)
lmin = event_glmn_cv$lambda.min # 0.01995262 # 0.01584893 # 0.01584893
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F, weights = weights)
KAUF_NACH_FLYER_PREDICTED = predict(event_glmn, s = lmin, newx = test, type = "response")
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.79, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.78, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.77, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.73, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.71, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.7, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.69, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.695, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.697, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.7, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.6, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.7, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
train_dt[residuals < quantile(residuals, 0.995), ID]
train_dt
train_dt[residuals < quantile(residuals, 0.995)]
train_dt$residuals <- glmnet_residuals(train, event_glmn, lmin)
ggplot(train_dt, aes(residuals)) + geom_density()
train_dt[residuals < quantile(residuals, 0.995)]
train_dt[residuals >= quantile(residuals, 0.995)]
train_dt[residuals >= quantile(residuals, 0.995), ID]
# identify 0.5% extreme cases
users_exclude <- train_dt[residuals >= quantile(residuals, 0.995), ID]
events <- events[-users_exclude, ]
events <- fread("/home/vinzent/Documents/r_scrips/mytoys/20140415_Scoring_Modell_daten.csv", sep = ';')
summary(events)
events$EINWOHNERKLASSE_WOHNORT <- as.factor(events$EINWOHNERKLASSE_WOHNORT)
events$KINDER_GEB_SAISON <- as.factor(events$KINDER_GEB_SAISON)
events$SUM_RABATT_GSCHEIN <- as.numeric(sub(',', '.', events$SUM_RABATT_GSCHEIN))
events$KUNDENALTER_BIN <- as.factor(round(events$KUNDENALTER, -1))
events$KINDER_BIN <- events$ANZ_KINDER > 0
events$CS_KONTAKT_FREQ <- events$ANZ_CS_KONTAKTE / events$ANZ_AUFTRAEGE
events$RETOURNIERT <- events$ANZ_RETOUREN > 0
events$KONTAKTIERT <- events$ANZ_CS_KONTAKTE > 0
events$GUTSCHEIN_FREQ <- events$ANZ_AUFTRAEGE_GSCHEIN / events$ANZ_AUFTRAEGE
events[ , RETOUREN_ANTEIL := min((ANZ_RETOUREN / ANZ_AUFTRAEGE), 1), by = ID]
events[ , SUM_Retouren_POS := SUM_LIEFERMENGE_RETOUREN/SUM_LIEFERMENGE_AUFTRAEGE]
events[ , RETOUREN_POS := ANZ_POSITIONEN_RETOUREN / ANZ_POSITIONEN_AUFTRAG]
events$RABATT_AVG <- events$SUM_RABATT_GSCHEIN / events$ANZ_AUFTRAEGE
events[ , POSITIONEN_AVG := ANZ_POSITIONEN_AUFTRAG / ANZ_AUFTRAEGE]
events$EINMAL_KUNDE <- events$ANZ_AUFTRAEGE == 1
events$NEWSLETTER <- events$ANZ_AUFTRAEGE_NL > 0
events$NEWSLETTER_30 <- events$ANZ_AUFTRAEGE_NL_0_TO_30 > 0
events$OPENING <- events$ANZ_NL_GEOEFFNET_0_TO_30 > 0
events$JAHRE_ERSTKAUF <- as.factor(ceiling(events$TAGE_ERSTKAUF/365))
events$JAHRE_LETZTKAUF <- as.factor(ceiling(events$TAGE_LETZTKAUF/365))
events$JAHRE_ERST_ZWEIT_KAUF <- as.factor(ceiling(events$TAGE_ERST_ZWEIT_KAUF/365))
events$JAHRE_LETZT_VORLETZT_KAUF <- as.factor(ceiling(events$TAGE_LETZT_VORLETZT_KAUF/365))
events$KAUF_NACH_FLYER <- as.factor(events$KAUF_NACH_FLYER)
events <- events[-users_exclude, ]
scale_columns = names(events[, -c(1,2,6,33,34,35,37,38,45:52)])
log_columns = c("SUM_LIEFERMENGE_AUFTRAEGE", "ANZ_POSITIONEN_AUFTRAG")
sqrt_columns = c("ANZ_AUFTRAEGE_360_TO_720", "ANZ_RETOUREN_0_TO_30", "TAGE_LETZT_VORLETZT_KAUF")
events[, (log_columns) := lapply(.SD, log), .SDcols = log_columns]
events[, (sqrt_columns) := lapply(.SD, sqrt), .SDcols = sqrt_columns]
events[, (scale_columns) := lapply(.SD, scale), .SDcols = scale_columns]
sample = sample(1:nrow(events), nrow(events)*(2/3))
# train/test split
set.seed(111)
sample = sample(1:nrow(events), nrow(events)*(2/3))
input = model.matrix( ~.-1, data = events[, -c("ID", "KAUF_NACH_FLYER")])
train = input[sample, ]
resp = events[sample, ]$KAUF_NACH_FLYER
weights <- ifelse(resp == 0, 1, 4)
test = input[-sample, ]
event_glmn_cv <- cv.glmnet(train, resp, alpha = 0, family = "binomial", lambda = l, standardize = F, nfolds = 12, weights = weights)
plot(event_glmn_cv)
lmin = event_glmn_cv$lambda.min # 0.01995262 # 0.01584893 # 0.01584893
event_glmn
KAUF_NACH_FLYER_PREDICTED = predict(event_glmn, s = lmin, newx = test, type = "response")
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.7, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.66, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.68, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.69, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
weights <- ifelse(resp == 0, 1, 1)
event_glmn_cv <- cv.glmnet(train, resp, alpha = 0, family = "binomial", lambda = l, standardize = F, nfolds = 12, weights = weights)
plot(event_glmn_cv)
lmin = event_glmn_cv$lambda.min # 0.01995262 # 0.01584893 # 0.01584893
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F, weights = weights)
KAUF_NACH_FLYER_PREDICTED = predict(event_glmn, s = lmin, newx = test, type = "response")
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.69, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.6, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.5, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.4, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.3, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.35, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.36, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.37, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
weights <- ifelse(resp == 0, 1, 2)
event_glmn_cv <- cv.glmnet(train, resp, alpha = 0, family = "binomial", lambda = l, standardize = F, nfolds = 12, weights = weights)
plot(event_glmn_cv)
lmin = event_glmn_cv$lambda.min # 0.01995262 # 0.01584893 # 0.01584893
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F, weights = weights)
KAUF_NACH_FLYER_PREDICTED = predict(event_glmn, s = lmin, newx = test, type = "response")
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.37, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.5, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.55, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
weights <- ifelse(resp == 0, 1, 3)
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F, weights = weights)
event_glmn_cv <- cv.glmnet(train, resp, alpha = 0, family = "binomial", lambda = l, standardize = F, nfolds = 12, weights = weights)
plot(event_glmn_cv)
lmin = event_glmn_cv$lambda.min # 0.01995262 # 0.01584893 # 0.01584893
# final model with best lambda
event_glmn <- glmnet(train, resp, alpha = 0, family = "binomial", lambda = lmin, standardize = F, weights = weights)
KAUF_NACH_FLYER_PREDICTED = predict(event_glmn, s = lmin, newx = test, type = "response")
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.55, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
table(ifelse(KAUF_NACH_FLYER_PREDICTED > 0.65, 1, 0), events[-sample, ]$KAUF_NACH_FLYER)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(ggplot2)
library(knitr)
library(kableExtra)
wd = "/home/vinzent/Documents/r_scrips/Babbel"
setwd(wd)
events = fread("challenge_data/learner_item_data.csv", sep = ',')
events$uuid <- as.factor(events$uuid)
setkey(events, uuid, created_at)
summary(events)
times <- events[, -c("trainer_item_id")] # duplicate the table
times$counter <- times$counter + 1
# join
events$preceeding_timestamp <- setDT(times)[events, created_at, on = .(uuid, counter)]
times <- events[, -c("trainer_item_id")] # duplicate the table
times$counter <- times$counter + 1
# join
events$preceeding_timestamp <- setDT(times)[events, created_at, on = .(uuid, counter)]
events[ , counter := 1:.N, by = .(uuid)]
summary(events)
times <- events[, -c("trainer_item_id")] # duplicate the table
# join
events$preceeding_timestamp <- setDT(times)[events, created_at, on = .(uuid, counter)]
rm(times)
events[, new_session_start := as.integer(difftime(created_at, preceeding_timestamp,
units = "mins")) > 60]
events[, new_session_start := as.integer(difftime(created_at, preceeding_timestamp,
units = "mins")) > 60]
# fix first events
events[is.na(new_session_start), new_session_start := FALSE]
events[, session_id := cumsum(as.integer(ifelse(new_session_start == TRUE, 1, 0))),
by = .(uuid)]
session_lengths <- events[, .(session_start = as.Date(min(created_at)),
duration_min = as.integer(ceiling(difftime(max(created_at),
min(created_at), units = "secs")/60))), by = .(session_id, uuid)]
# fix single item sesions
session_lengths[duration_min == 0, duration_min := 1]
test_groups = fread("challenge_data/test_groups.csv", sep = ',',
colClasses = c("chr", "factor"))
session_lengths$group <- setDT(test_groups)[session_lengths, test_group, on = "uuid"]
head(session_lengths)
ggplot(session_lengths, aes(session_lengths$duration_min)) + geom_histogram(, binwidth = 1, fill = "lightblue") + theme_bw() + scale_x_continuous(limits = c(0, 200)) + xlab("Session duration in minutes") + ylab("Sessions")
daily_sessions <- session_lengths[, .(daily_sessions = uniqueN(session_id)),
by = .(uuid, group, session_start)][, .(max_sessions = max(daily_sessions)),
by = .(uuid, group)]
ggplot(daily_sessions, aes(daily_sessions$max_sessions))+ geom_histogram(, binwidth = 1, fill = "lightblue") + theme_bw() + xlab("Session per day") + ylab("Users")
daily_sessions
summary(daily_sessions)
library(data.table)
library(ggplot2)
library(knitr)
library(kableExtra)
wd = "/home/vinzent/Documents/r_scrips/Babbel"
setwd(wd)
events = fread("challenge_data/learner_item_data.csv", sep = ',')
events$uuid <- as.factor(events$uuid)
events[, created_at := as.POSIXct(created_at)]
events$trainer_item_id <- as.factor(events$trainer_item_id)
setkey(events, uuid, created_at)
events[ , counter := 1:.N, by = .(uuid)]
summary(events)
times <- events[, -c("trainer_item_id")] # duplicate the table
times$counter <- times$counter + 1
# join
events$preceeding_timestamp <- setDT(times)[events, created_at, on = .(uuid, counter)]
rm(times)
events[, new_session_start := as.integer(difftime(created_at, preceeding_timestamp,
units = "mins")) > 60]
# fix first events
events[is.na(new_session_start), new_session_start := FALSE]
events[, session_id := cumsum(as.integer(ifelse(new_session_start == TRUE, 1, 0))),
by = .(uuid)]
session_lengths <- events[, .(session_start = as.Date(min(created_at)),
duration_min = as.integer(ceiling(difftime(max(created_at),
min(created_at), units = "secs")/60))), by = .(session_id, uuid)]
# fix single item sesions
session_lengths[duration_min == 0, duration_min := 1]
test_groups = fread("challenge_data/test_groups.csv", sep = ',',
colClasses = c("chr", "factor"))
session_lengths$group <- setDT(test_groups)[session_lengths, test_group, on = "uuid"]
head(session_lengths)
ggplot(session_lengths, aes(session_lengths$duration_min)) + geom_histogram(, binwidth = 1, fill = "lightblue") + theme_bw() + scale_x_continuous(limits = c(0, 200)) + xlab("Session duration in minutes") + ylab("Sessions")
daily_sessions <- session_lengths[, .(daily_sessions = uniqueN(session_id)),
by = .(uuid, group, session_start)][, .(max_sessions = max(daily_sessions)),
by = .(uuid, group)]
#table(daily_sessions$group)
ggplot(daily_sessions, aes(daily_sessions$max_sessions))+ geom_histogram(, binwidth = 1, fill = "lightblue") + theme_bw() + xlab("Session per day") + ylab("Users")
kable_styling(kable(table(daily_sessions$max_sessions > 1), col.names = c("Multiple Sessions", "Users")), font_size = 8, position = "left")
kable_styling(kable(table(daily_sessions$max_sessions), col.names = c("Daily Sessions", "Users")), font_size = 8, position = "left")
kable_styling(kable(round(prop.table(table(daily_sessions$max_sessions))* 100, 2),
col.names = c("Daily Sessions", "% Users")), font_size = 8, position = "left")
stats_table <- session_lengths[, .(median_duration = median(duration_min)), by = group]
stats_table <- cbind(stats_table,
daily_sessions[, .(single_session = sum(ifelse(max_sessions == 1, 1, 0)),
users = .N), by = group][ , -1])
stats_table[, prop_single_session := round(single_session / users, 3)]
kable(stats_table, col.names = c("Group", "Median Duration", "Single Session Users", "Users",  "Proportion single Session"))
prop.test(cbind(stats_table[ , single_session], stats_table[, users-single_session]),
alternative='greater')
ggplot(session_lengths, aes(session_lengths$duration_min, color = group)) + geom_density() + theme_bw() + scale_x_continuous(limits = c(0, 60)) + xlab("Session duration in minutes")
